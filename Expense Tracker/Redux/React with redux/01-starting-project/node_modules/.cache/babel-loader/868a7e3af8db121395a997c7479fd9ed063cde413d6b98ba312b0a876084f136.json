{"ast":null,"code":"import { createStore } from \"redux\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  counter: 0,\n  showCounter: true\n};\ncreateSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment() {},\n    decrement() {},\n    increase() {},\n    incrementby2() {},\n    IncrementBy5() {},\n    DecremenentBy5() {},\n    toggle() {}\n  }\n});\nconst counterReducer = (state = initialState, action) => {\n  if (action.type === \"increment\") {\n    // (unmuted this ..this can lead to debug)\n    // state.counter++;  //(unmuted this ..this can lead to debug)\n    // return{\n    //     counter: state.counter,\n    //     showCounter: state.showCounter\n    // }\n\n    // (this is original state)\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"IncrementBy5\") {\n    return {\n      counter: state.counter + 5,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"increase\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"incrementby2\") {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"DecremenentBy5\") {\n    return {\n      counter: state.counter - 5,\n      showCounter: state.showCounter\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      showCounter: !state.showCounter,\n      counter: state.counter\n    };\n  }\n  return state;\n};\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","decrement","increase","incrementby2","IncrementBy5","DecremenentBy5","toggle","counterReducer","state","action","type","amount","store"],"sources":["C:/Users/PC/Desktop/react-complete/Expense Tracker/Redux/React with redux/01-starting-project/src/store/reduxIndex.js"],"sourcesContent":["import { createStore } from \"redux\";\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {counter: 0, showCounter: true}\r\n\r\ncreateSlice({\r\n    name: 'counter',\r\n    initialState,\r\n    reducers: {\r\n        increment(){},\r\n        decrement(){},\r\n        increase(){},\r\n        incrementby2(){},\r\n        IncrementBy5(){},\r\n        DecremenentBy5(){},\r\n        toggle(){}\r\n    }\r\n})\r\n\r\n\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n\r\n    // (unmuted this ..this can lead to debug)\r\n    // state.counter++;  //(unmuted this ..this can lead to debug)\r\n    // return{\r\n    //     counter: state.counter,\r\n    //     showCounter: state.showCounter\r\n    // }\r\n\r\n    // (this is original state)\r\n    return {\r\n      counter: state.counter + 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === \"IncrementBy5\") {\r\n    return {\r\n      counter: state.counter + 5,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === \"increase\") {\r\n    return {\r\n      counter: state.counter + action.amount,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if(action.type === \"incrementby2\"){\r\n    return{\r\n        counter: state.counter + action.amount,\r\n        showCounter: state.showCounter\r\n    }\r\n  }\r\n\r\n  if (action.type === \"decrement\") {\r\n    return {\r\n      counter: state.counter - 1,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if (action.type === \"DecremenentBy5\") {\r\n    return {\r\n      counter: state.counter - 5,\r\n      showCounter: state.showCounter\r\n    };\r\n  }\r\n\r\n  if(action.type === \"toggle\"){\r\n    return{\r\n        showCounter: !state.showCounter,\r\n        counter: state.counter\r\n    }\r\n  }\r\n\r\n  return state;\r\n};\r\n\r\nconst store = createStore(counterReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EAACC,OAAO,EAAE,CAAC;EAAEC,WAAW,EAAE;AAAI,CAAC;AAEpDH,WAAW,CAAC;EACRI,IAAI,EAAE,SAAS;EACfH,YAAY;EACZI,QAAQ,EAAE;IACNC,SAASA,CAAA,EAAE,CAAC,CAAC;IACbC,SAASA,CAAA,EAAE,CAAC,CAAC;IACbC,QAAQA,CAAA,EAAE,CAAC,CAAC;IACZC,YAAYA,CAAA,EAAE,CAAC,CAAC;IAChBC,YAAYA,CAAA,EAAE,CAAC,CAAC;IAChBC,cAAcA,CAAA,EAAE,CAAC,CAAC;IAClBC,MAAMA,CAAA,EAAE,CAAC;EACb;AACJ,CAAC,CAAC;AAIF,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAGb,YAAY,EAAEc,MAAM,KAAK;EACvD,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAE/B;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,OAAO;MACLd,OAAO,EAAEY,KAAK,CAACZ,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEW,KAAK,CAACX;IACrB,CAAC;EACH;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,cAAc,EAAE;IAClC,OAAO;MACLd,OAAO,EAAEY,KAAK,CAACZ,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEW,KAAK,CAACX;IACrB,CAAC;EACH;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MACLd,OAAO,EAAEY,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACE,MAAM;MACtCd,WAAW,EAAEW,KAAK,CAACX;IACrB,CAAC;EACH;EAEA,IAAGY,MAAM,CAACC,IAAI,KAAK,cAAc,EAAC;IAChC,OAAM;MACFd,OAAO,EAAEY,KAAK,CAACZ,OAAO,GAAGa,MAAM,CAACE,MAAM;MACtCd,WAAW,EAAEW,KAAK,CAACX;IACvB,CAAC;EACH;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MACLd,OAAO,EAAEY,KAAK,CAACZ,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEW,KAAK,CAACX;IACrB,CAAC;EACH;EAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,gBAAgB,EAAE;IACpC,OAAO;MACLd,OAAO,EAAEY,KAAK,CAACZ,OAAO,GAAG,CAAC;MAC1BC,WAAW,EAAEW,KAAK,CAACX;IACrB,CAAC;EACH;EAEA,IAAGY,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAC;IAC1B,OAAM;MACFb,WAAW,EAAE,CAACW,KAAK,CAACX,WAAW;MAC/BD,OAAO,EAAEY,KAAK,CAACZ;IACnB,CAAC;EACH;EAEA,OAAOY,KAAK;AACd,CAAC;AAED,MAAMI,KAAK,GAAGnB,WAAW,CAACc,cAAc,CAAC;AAEzC,eAAeK,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}